/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package cn.gsein.zjass.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static cn.gsein.zjass.psi.JassTypes.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Jass.flex</tt>
 */
public class JassLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0,  0,  1, 1
  };

  /**
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15856 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
          "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
                  "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
                  "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
                  "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\26\1\60\1\61\5\21"+
                  "\2\26\1\62\7\21\1\26\1\63\20\21\1\26\1\64\1\21\1\65\13\26\1\66\1\26\1\67\22"+
                  "\21\1\70\5\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100"+
                  "\2\21\1\101\1\102\7\21\123\26\1\103\7\26\1\104\1\105\12\26\1\106\24\21\1\26"+
                  "\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
          "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15\3\0\1\16"+
                  "\1\17\1\20\1\17\2\21\1\22\3\21\1\22\1\21\70\23\1\24\1\23\1\25\1\26\1\27\1"+
                  "\30\2\26\16\23\1\31\1\32\1\33\1\34\2\23\1\35\11\23\1\36\21\23\1\35\25\23\1"+
                  "\37\3\23\1\40\1\41\1\37\4\23\1\26\1\37\4\23\1\36\1\42\1\26\3\23\2\43\3\26"+
                  "\1\23\1\43\10\23\1\44\1\45\14\23\1\46\1\47\1\23\1\50\1\44\1\51\2\26\7\23\1"+
                  "\52\14\23\1\25\1\26\1\44\1\53\4\23\1\54\1\55\5\23\1\54\2\26\3\23\1\56\10\26"+
                  "\2\23\1\31\1\54\2\26\1\57\1\23\1\35\17\23\1\60\1\44\1\37\1\23\1\46\1\47\1"+
                  "\61\2\23\1\50\1\62\1\63\1\47\1\64\1\65\1\66\1\60\1\44\1\25\1\26\1\67\1\70"+
                  "\1\61\2\23\1\50\1\71\1\72\1\70\1\73\1\41\1\74\1\75\1\44\1\54\1\26\1\67\1\36"+
                  "\1\35\2\23\1\50\1\76\1\63\1\36\1\77\1\100\1\26\1\60\1\44\1\26\1\41\1\67\1"+
                  "\47\1\61\2\23\1\50\1\76\1\63\1\47\1\73\1\101\1\66\1\60\1\44\1\41\1\26\1\102"+
                  "\1\103\1\104\1\105\1\106\1\103\1\23\1\24\1\103\1\104\1\107\1\26\1\75\1\44"+
                  "\2\26\1\46\1\31\1\50\2\23\1\50\1\23\1\110\1\31\1\104\1\111\1\43\1\60\1\44"+
                  "\2\26\1\46\1\31\1\50\2\23\1\50\1\46\1\63\1\31\1\104\1\111\1\33\1\60\1\44\1"+
                  "\112\1\26\1\67\1\31\1\50\4\23\1\52\1\31\1\113\1\57\1\65\1\60\1\44\1\26\1\114"+
                  "\1\102\1\23\1\40\1\114\2\23\1\35\1\115\1\40\1\116\1\117\1\23\1\75\1\44\1\120"+
                  "\1\26\1\37\6\23\1\43\1\23\1\40\1\44\1\121\4\26\1\122\1\123\1\57\1\37\1\124"+
                  "\1\102\1\23\1\77\1\117\1\54\1\44\1\125\4\26\1\100\2\26\1\25\1\44\1\121\1\126"+
                  "\1\127\1\23\1\37\3\23\1\27\1\37\1\23\1\31\2\23\1\37\3\23\1\27\1\33\7\26\10"+
                  "\23\1\44\1\121\10\23\1\44\1\130\4\23\1\36\1\131\5\23\1\132\51\23\1\104\1\40"+
                  "\1\104\5\23\1\104\4\23\1\104\1\40\1\104\1\23\1\40\7\23\1\104\10\23\1\52\4"+
                  "\26\2\23\2\26\12\23\2\54\1\37\114\23\1\47\2\23\1\133\2\23\1\43\11\23\1\103"+
                  "\1\23\1\100\1\23\1\31\1\27\1\26\2\23\1\27\1\26\2\23\1\56\1\26\1\23\1\31\1"+
                  "\134\1\26\12\23\1\135\1\136\1\44\1\121\3\26\1\137\1\44\1\121\13\23\1\26\5"+
                  "\23\1\43\10\23\1\54\1\26\3\23\1\40\1\23\1\56\1\23\1\56\1\75\1\44\3\23\1\54"+
                  "\1\27\1\26\5\23\1\56\3\23\1\25\1\44\1\121\4\26\3\23\1\56\7\23\1\40\3\23\1"+
                  "\47\1\44\1\121\1\44\1\121\1\65\1\26\1\23\1\40\10\26\11\23\1\56\1\44\1\121"+
                  "\1\26\1\140\1\56\1\26\6\23\1\44\1\53\6\23\1\56\1\26\7\23\1\26\1\44\1\141\1"+
                  "\44\1\53\3\23\1\54\1\23\1\100\10\26\1\132\3\23\1\40\1\25\36\23\1\54\1\140"+
                  "\42\23\2\54\4\23\2\54\1\23\1\142\3\23\1\54\6\23\1\31\1\117\1\143\1\27\1\144"+
                  "\1\56\1\23\1\27\1\143\1\27\1\145\1\146\3\26\1\147\1\26\1\65\1\100\1\26\1\150"+
                  "\1\151\2\26\1\41\1\65\2\26\1\23\1\27\6\26\4\23\1\100\1\26\1\116\1\114\1\115"+
                  "\1\152\1\30\1\153\1\23\1\63\1\154\1\155\2\26\5\23\1\100\144\26\1\101\6\23"+
                  "\1\25\42\26\5\23\1\40\5\23\1\40\20\23\1\27\1\140\1\56\1\26\4\23\1\36\1\131"+
                  "\7\23\1\65\1\26\1\65\2\23\1\40\1\26\10\40\4\23\5\26\1\65\72\26\1\156\3\26"+
                  "\1\37\1\23\1\152\1\27\1\37\11\23\1\40\1\157\1\37\12\23\1\132\1\154\4\23\1"+
                  "\54\1\37\12\23\1\40\2\26\3\23\1\43\6\26\170\23\1\54\11\26\72\23\1\54\5\26"+
                  "\21\23\1\27\10\26\5\23\1\54\41\23\1\27\2\23\1\44\1\160\2\26\6\23\1\132\1\36"+
                  "\16\23\1\25\3\26\1\65\1\23\1\114\14\23\1\61\3\23\1\40\1\23\7\26\1\65\6\23"+
                  "\3\26\6\23\1\56\1\26\10\23\1\54\1\26\1\44\1\121\3\23\1\161\1\44\1\53\3\23"+
                  "\1\54\4\23\1\56\1\26\3\23\1\27\10\23\1\100\1\65\1\44\1\121\2\23\1\44\1\162"+
                  "\6\23\1\40\1\26\1\23\1\54\1\44\1\121\2\23\1\40\1\114\10\23\1\43\2\26\1\137"+
                  "\2\23\1\163\1\26\3\164\1\26\2\40\5\23\1\132\1\54\1\26\17\23\1\165\1\44\1\121"+
                  "\64\23\1\56\1\26\2\23\1\40\1\140\5\23\1\56\40\26\55\23\1\54\15\23\1\25\4\26"+
                  "\1\40\1\26\1\140\1\154\1\23\1\50\1\40\1\117\1\166\15\23\1\25\3\26\1\140\54"+
                  "\23\1\54\2\26\10\23\1\114\6\23\5\26\1\23\1\56\2\23\2\26\2\23\1\106\2\26\1"+
                  "\154\4\26\1\31\20\23\1\27\2\26\1\44\1\121\1\37\2\23\1\70\1\37\2\23\1\43\1"+
                  "\101\12\23\1\40\3\114\1\167\4\26\1\23\1\46\2\23\1\40\2\23\1\170\1\23\1\54"+
                  "\1\23\1\54\4\26\17\23\1\43\10\26\6\23\1\27\20\26\1\131\20\26\3\23\1\27\6\23"+
                  "\1\100\1\26\1\100\3\26\4\23\2\26\3\23\1\43\5\23\1\43\3\23\1\54\4\23\1\56\1"+
                  "\23\1\152\5\26\23\23\1\54\1\44\1\121\4\23\1\56\4\23\1\56\5\23\1\26\6\23\1"+
                  "\56\23\26\46\23\1\40\1\26\2\23\1\54\1\26\1\23\23\26\1\54\1\50\4\23\1\36\1"+
                  "\171\2\23\1\54\1\26\2\23\1\40\1\26\3\23\1\40\10\26\2\23\1\165\1\26\2\23\1"+
                  "\54\1\26\3\23\1\25\10\26\7\23\1\101\10\26\1\172\1\57\1\46\1\37\2\23\1\56\1"+
                  "\70\4\26\3\23\1\27\3\23\1\27\4\26\1\23\1\37\2\23\1\40\3\26\6\23\1\54\1\26"+
                  "\2\23\1\54\1\26\2\23\1\43\1\26\2\23\1\25\15\26\11\23\1\100\6\26\6\23\1\43"+
                  "\1\26\6\23\1\43\41\26\10\23\1\40\3\26\1\75\1\44\1\26\1\65\7\23\1\43\2\26\3"+
                  "\23\1\100\1\44\1\121\6\23\1\173\1\44\2\26\4\23\1\174\1\26\10\23\1\27\1\167"+
                  "\1\44\1\175\4\26\2\23\1\35\4\23\1\33\10\26\1\40\1\153\1\23\1\36\1\23\1\100"+
                  "\7\23\1\43\1\44\1\121\1\46\1\47\1\61\2\23\1\50\1\76\1\63\1\47\1\73\1\107\1"+
                  "\154\1\144\2\27\21\26\11\23\1\43\1\44\1\121\4\26\10\23\1\36\1\26\1\44\1\121"+
                  "\24\26\6\23\1\54\1\23\1\100\2\26\1\54\4\26\10\23\1\176\1\26\1\44\1\121\4\26"+
                  "\7\23\1\26\1\44\1\121\6\26\3\23\1\110\1\23\1\56\1\44\1\121\54\26\10\23\1\44"+
                  "\1\121\1\26\1\65\70\26\7\23\1\100\40\26\1\23\1\50\4\23\1\40\1\23\1\100\1\26"+
                  "\1\44\1\121\2\26\1\114\3\23\1\114\2\23\1\37\1\40\51\26\63\23\1\25\14\26\15"+
                  "\23\1\40\2\26\30\23\1\56\27\26\5\23\1\40\72\26\10\23\1\40\67\26\7\23\1\100"+
                  "\3\23\1\40\1\44\1\121\14\26\3\23\1\54\1\27\1\26\6\23\1\40\1\26\1\56\1\26\1"+
                  "\44\1\121\1\140\2\23\1\154\2\23\56\26\10\23\1\27\1\26\5\23\1\40\1\26\1\65"+
                  "\2\23\10\26\1\100\3\26\75\23\1\27\2\26\36\23\1\43\41\26\1\25\77\26\15\23\1"+
                  "\43\1\23\1\27\1\23\1\100\1\23\1\177\130\26\1\154\1\110\1\43\1\140\1\52\1\56"+
                  "\3\26\1\200\22\26\1\167\67\26\12\23\1\31\10\23\1\31\1\201\1\202\1\23\1\203"+
                  "\1\46\7\23\1\36\1\52\2\31\3\23\1\204\1\117\1\114\1\50\51\23\1\54\3\23\1\50"+
                  "\2\23\1\132\3\23\1\132\2\23\1\31\3\23\1\31\2\23\1\40\3\23\1\40\3\23\1\50\3"+
                  "\23\1\50\2\23\1\132\1\60\6\44\6\23\1\40\1\140\5\23\1\27\1\131\1\26\1\150\2"+
                  "\26\1\140\1\37\1\23\52\26\1\40\2\23\1\61\1\166\1\43\72\26\30\23\1\27\1\26"+
                  "\1\40\5\26\11\23\1\43\1\44\1\121\24\26\1\46\3\23\1\122\1\37\1\132\1\205\1"+
                  "\116\1\206\1\122\1\142\1\122\2\132\1\74\1\23\1\35\1\23\1\56\1\67\1\35\1\23"+
                  "\1\56\116\26\3\23\1\25\3\23\1\25\3\23\1\25\16\26\32\23\1\40\5\26\106\23\1"+
                  "\27\1\26\33\23\1\54\120\23\1\25\53\26\3\23\1\54\134\26\36\23\2\26");

  /* The ZZ_CMAP_A table has 1080 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
          "\11\5\1\6\1\21\2\33\1\21\2\5\1\6\1\70\1\15\1\60\1\13\1\52\1\5\1\4\1\53\1\54"+
                  "\1\35\1\50\1\55\1\51\1\3\1\32\1\7\7\11\2\10\2\5\1\71\1\47\1\67\2\5\6\14\11"+
                  "\36\1\12\2\36\1\56\1\16\1\57\1\5\1\36\1\5\1\27\1\20\1\45\1\44\1\25\1\26\1"+
                  "\41\1\66\1\61\1\36\1\65\1\30\1\36\1\43\1\42\1\62\1\36\1\23\1\31\1\22\1\24"+
                  "\1\64\1\72\1\63\1\46\1\17\12\5\1\33\2\5\1\6\11\5\1\40\12\5\1\40\2\5\17\40"+
                  "\1\5\12\37\4\0\4\37\16\0\5\37\7\0\1\37\1\0\1\37\1\0\5\37\1\0\2\37\2\0\4\37"+
                  "\1\0\1\37\6\0\1\37\1\0\3\37\1\0\1\37\1\0\4\37\1\0\13\37\1\0\1\37\1\0\16\37"+
                  "\2\0\1\37\7\0\2\37\1\0\2\37\1\0\4\37\5\0\12\2\4\0\6\37\1\0\10\37\2\0\2\37"+
                  "\1\0\6\37\2\2\3\37\2\0\4\37\2\0\3\37\2\2\14\37\4\0\1\37\5\0\4\37\10\0\10\37"+
                  "\2\0\2\2\1\37\2\0\6\37\1\0\1\37\3\0\4\37\2\0\5\37\2\0\4\37\10\0\1\37\4\0\2"+
                  "\37\1\0\1\37\1\0\3\37\1\0\6\37\4\0\2\37\1\0\2\37\1\0\2\37\1\0\2\37\2\0\1\37"+
                  "\1\0\3\37\2\0\3\37\3\0\4\37\1\0\1\37\7\0\2\2\1\37\1\0\2\37\1\0\5\37\1\0\3"+
                  "\37\2\0\1\37\15\0\2\37\2\0\2\37\1\0\6\37\3\0\3\37\1\0\4\37\3\0\2\37\1\0\1"+
                  "\37\1\0\2\37\3\0\2\37\3\0\1\37\6\0\3\37\3\0\3\37\5\0\2\37\2\0\2\37\5\0\1\37"+
                  "\1\0\5\37\3\0\12\37\1\0\1\37\4\0\1\37\4\0\6\37\1\0\1\37\3\0\2\37\4\0\2\2\7"+
                  "\0\2\37\1\0\1\37\2\0\2\37\1\0\1\37\2\0\1\37\3\0\3\37\1\0\1\37\1\0\1\37\2\2"+
                  "\2\0\4\37\5\0\1\37\1\0\1\37\1\0\1\37\4\0\2\37\2\2\4\37\7\0\1\37\2\0\3\37\1"+
                  "\0\4\37\1\1\10\37\1\0\2\37\4\0\4\37\3\0\1\37\4\0\2\37\5\0\3\37\5\0\5\37\2"+
                  "\2\3\0\3\37\1\0\1\37\1\0\1\37\1\0\1\37\1\0\1\37\2\0\3\37\1\0\6\37\2\0\2\37"+
                  "\13\1\5\0\2\34\5\0\1\1\4\0\1\37\12\0\1\1\1\0\5\37\2\0\1\37\1\0\4\37\1\0\1"+
                  "\37\5\0\5\37\4\0\1\37\1\0\1\1\4\0\3\37\1\0\2\37\2\0\3\37\2\2\2\37\7\0\1\37"+
                  "\1\0\1\37\2\0\2\2\5\37\3\0\5\37\2\0\6\37\1\0\3\37\1\0\2\37\2\0\2\37\1\0\2"+
                  "\37\1\0\2\37\2\0\3\37\3\0\3\37\1\0\2\37\1\0\2\37\3\0\1\37\2\0\5\37\1\0\2\37"+
                  "\1\0\5\37\1\0\2\2\4\37\2\0\1\37\1\0\2\2\1\37\1\0\1\37\3\0\1\37\3\0\1\37\3"+
                  "\0\2\37\3\0\2\37\3\0\4\37\4\0\1\37\2\0\2\37\2\0\4\37\1\0\4\37\1\0\1\37\1\0"+
                  "\5\37\1\0\4\37\2\0\1\37\1\0\1\37\5\0\1\37\1\0\1\37\1\0\3\37");

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\2\0\1\1\1\2\1\3\2\1\2\3\1\4\2\1"+
                  "\7\4\1\5\1\6\5\4\1\7\1\10\1\11\1\12"+
                  "\1\13\1\14\1\15\1\16\1\17\1\20\1\4\1\21"+
                  "\1\1\1\22\1\0\1\23\1\0\1\24\1\0\1\25"+
                  "\1\0\1\26\1\0\16\4\1\27\1\0\1\4\1\30"+
                  "\6\4\1\31\1\32\1\4\1\33\1\34\1\35\1\36"+
                  "\14\4\1\37\2\4\1\40\2\0\3\4\1\41\4\4"+
                  "\1\42\1\4\1\43\1\44\1\4\1\45\10\4\1\46"+
                  "\1\4\1\0\1\47\1\4\1\50\3\4\1\51\2\4"+
                  "\1\52\5\4\1\53\3\4\1\54\1\55\3\4\1\56"+
                  "\2\4\1\57\1\60\7\4\1\61\3\4\1\62\1\4"+
                  "\1\63\1\4\1\64\2\4\1\65\1\66\1\4\1\67"+
                  "\2\4\1\70\1\71\1\72\3\4\1\73\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
                  "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
                  "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\166\0\u049c\0\u04d7\0\u0512"+
                  "\0\u054d\0\u0588\0\u05c3\0\166\0\166\0\166\0\166\0\166"+
                  "\0\166\0\166\0\166\0\166\0\u05fe\0\u0639\0\u0674\0\u06af"+
                  "\0\354\0\u0127\0\u06ea\0\u0725\0\u024e\0\u024e\0\u0289\0\166"+
                  "\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd"+
                  "\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5"+
                  "\0\u0b10\0\u0b4b\0\u0213\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72"+
                  "\0\u0cad\0\166\0\u0213\0\u0ce8\0\166\0\166\0\166\0\166"+
                  "\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0"+
                  "\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0213\0\u0fe7\0\u1022\0\u0213"+
                  "\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa"+
                  "\0\u1235\0\u1270\0\u0213\0\u12ab\0\u0213\0\u0213\0\u12e6\0\u1321"+
                  "\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9"+
                  "\0\u0213\0\u1534\0\u156f\0\166\0\u15aa\0\u0213\0\u15e5\0\u1620"+
                  "\0\u165b\0\u0213\0\u1696\0\u16d1\0\u0213\0\u170c\0\u1747\0\u1782"+
                  "\0\u17bd\0\u17f8\0\u0213\0\u1833\0\u186e\0\u18a9\0\u0213\0\u0213"+
                  "\0\u18e4\0\u191f\0\u195a\0\u0213\0\u1995\0\u19d0\0\u1a0b\0\u0213"+
                  "\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u0213"+
                  "\0\u1be3\0\u1c1e\0\u1c59\0\u0213\0\u1c94\0\u0213\0\u1ccf\0\u0213"+
                  "\0\u1d0a\0\u1d45\0\u0213\0\u0213\0\u1d80\0\u0213\0\u1dbb\0\u1df6"+
                  "\0\u0213\0\u0213\0\u0213\0\u1e31\0\u1e6c\0\u1ea7\0\u0213\0\u0213";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\3\1\4\1\5\1\6\1\7\1\3\1\4\1\10"+
                  "\2\11\1\12\1\13\1\12\1\14\1\3\2\12\1\4"+
                  "\1\15\1\16\1\12\1\17\1\20\1\21\1\22\1\23"+
                  "\1\24\2\4\1\25\1\12\2\3\1\26\1\27\1\30"+
                  "\1\31\1\32\1\12\1\33\1\34\1\35\1\36\1\37"+
                  "\1\40\1\41\1\42\1\43\1\44\1\45\5\12\1\46"+
                  "\1\47\1\50\1\12\73\3\74\0\1\4\4\0\1\4"+
                  "\12\0\1\4\11\0\2\4\40\0\1\51\1\52\3\0"+
                  "\3\51\63\0\1\52\4\0\3\52\64\0\1\53\1\0"+
                  "\27\53\1\0\2\53\1\0\33\53\2\0\1\51\1\52"+
                  "\3\0\1\54\1\51\1\54\1\55\50\0\1\55\11\0"+
                  "\1\11\1\52\3\0\3\11\63\0\1\12\4\0\4\12"+
                  "\1\0\1\12\2\0\2\12\1\0\10\12\4\0\11\12"+
                  "\12\0\6\12\3\0\1\12\7\0\3\56\2\0\1\56"+
                  "\3\0\1\56\4\0\3\56\14\0\2\56\25\0\15\57"+
                  "\1\60\1\61\2\57\1\0\51\57\2\0\1\12\4\0"+
                  "\4\12\1\0\1\12\2\0\2\12\1\0\1\12\1\62"+
                  "\3\12\1\63\2\12\4\0\10\12\1\64\12\0\5\12"+
                  "\1\65\3\0\1\12\2\0\1\12\4\0\4\12\1\0"+
                  "\1\12\2\0\2\12\1\0\3\12\1\66\4\12\4\0"+
                  "\11\12\12\0\6\12\3\0\1\12\2\0\1\12\4\0"+
                  "\4\12\1\0\1\12\2\0\2\12\1\0\6\12\1\67"+
                  "\1\12\4\0\5\12\1\70\3\12\12\0\2\12\1\71"+
                  "\3\12\3\0\1\12\2\0\1\12\4\0\4\12\1\0"+
                  "\1\12\2\0\2\12\1\0\2\12\1\72\2\12\1\73"+
                  "\2\12\4\0\11\12\12\0\6\12\3\0\1\12\2\0"+
                  "\1\12\4\0\4\12\1\0\1\12\2\0\2\12\1\0"+
                  "\1\12\1\74\6\12\4\0\5\12\1\75\3\12\12\0"+
                  "\6\12\3\0\1\12\2\0\1\12\4\0\4\12\1\0"+
                  "\1\12\2\0\2\12\1\0\10\12\4\0\4\12\1\76"+
                  "\4\12\12\0\6\12\3\0\1\12\2\0\1\12\4\0"+
                  "\4\12\1\0\1\12\2\0\2\12\1\0\3\12\1\77"+
                  "\4\12\4\0\11\12\12\0\6\12\3\0\1\12\32\0"+
                  "\1\100\2\0\1\101\37\0\1\12\4\0\4\12\1\0"+
                  "\1\12\2\0\2\12\1\0\6\12\1\102\1\12\4\0"+
                  "\11\12\12\0\6\12\3\0\1\12\2\0\1\12\4\0"+
                  "\4\12\1\0\1\12\2\0\2\12\1\0\1\12\1\103"+
                  "\6\12\4\0\11\12\12\0\6\12\3\0\1\12\2\0"+
                  "\1\12\4\0\4\12\1\0\1\12\2\0\2\12\1\0"+
                  "\2\12\1\104\2\12\1\105\2\12\4\0\4\12\1\106"+
                  "\4\12\12\0\6\12\3\0\1\12\2\0\1\12\4\0"+
                  "\4\12\1\0\1\12\2\0\2\12\1\0\3\12\1\107"+
                  "\4\12\4\0\11\12\12\0\6\12\3\0\1\12\2\0"+
                  "\1\12\4\0\4\12\1\0\1\12\2\0\2\12\1\0"+
                  "\5\12\1\110\2\12\4\0\4\12\1\111\4\12\12\0"+
                  "\6\12\3\0\1\12\47\0\1\112\25\0\1\12\4\0"+
                  "\4\12\1\0\1\12\2\0\2\12\1\0\4\12\1\113"+
                  "\3\12\4\0\5\12\1\114\3\12\12\0\6\12\3\0"+
                  "\1\12\47\0\1\115\72\0\1\116\72\0\1\117\26\0"+
                  "\1\53\1\120\27\53\1\0\2\53\1\0\33\53\2\0"+
                  "\1\51\1\52\3\0\1\54\1\51\1\54\65\0\1\57"+
                  "\10\0\4\57\1\0\2\57\2\0\2\57\13\0\1\57"+
                  "\20\0\1\57\10\0\1\12\4\0\4\12\1\0\1\12"+
                  "\2\0\2\12\1\0\2\12\1\121\5\12\4\0\11\12"+
                  "\12\0\6\12\3\0\1\12\2\0\1\12\4\0\4\12"+
                  "\1\0\1\12\2\0\2\12\1\0\10\12\4\0\11\12"+
                  "\12\0\4\12\1\122\1\12\3\0\1\12\2\0\1\12"+
                  "\4\0\4\12\1\0\1\12\2\0\2\12\1\0\10\12"+
                  "\4\0\11\12\12\0\1\12\1\123\4\12\3\0\1\12"+
                  "\2\0\1\12\4\0\4\12\1\0\1\12\2\0\2\12"+
                  "\1\0\3\12\1\124\4\12\4\0\11\12\12\0\6\12"+
                  "\3\0\1\12\2\0\1\12\4\0\4\12\1\0\1\12"+
                  "\2\0\2\12\1\0\1\125\7\12\4\0\11\12\12\0"+
                  "\6\12\3\0\1\12\2\0\1\12\4\0\4\12\1\0"+
                  "\1\12\2\0\2\12\1\0\7\12\1\126\4\0\11\12"+
                  "\12\0\6\12\3\0\1\12\2\0\1\12\4\0\4\12"+
                  "\1\0\1\12\2\0\2\12\1\0\10\12\4\0\6\12"+
                  "\1\127\2\12\12\0\6\12\3\0\1\12\2\0\1\12"+
                  "\4\0\4\12\1\0\1\12\2\0\2\12\1\0\1\130"+
                  "\7\12\4\0\11\12\12\0\1\131\5\12\3\0\1\12"+
                  "\2\0\1\12\4\0\4\12\1\0\1\12\2\0\2\12"+
                  "\1\0\10\12\4\0\5\12\1\132\3\12\12\0\6\12"+
                  "\3\0\1\12\2\0\1\12\4\0\4\12\1\0\1\12"+
                  "\2\0\2\12\1\0\6\12\1\133\1\12\4\0\11\12"+
                  "\12\0\6\12\3\0\1\12\2\0\1\12\4\0\4\12"+
                  "\1\0\1\12\2\0\2\12\1\0\1\12\1\134\6\12"+
                  "\4\0\11\12\12\0\6\12\3\0\1\12\2\0\1\12"+
                  "\4\0\4\12\1\0\1\12\2\0\2\12\1\0\10\12"+
                  "\4\0\6\12\1\135\2\12\12\0\6\12\3\0\1\12"+
                  "\2\0\1\12\4\0\4\12\1\0\1\12\2\0\2\12"+
                  "\1\0\10\12\4\0\4\12\1\136\2\12\1\137\1\12"+
                  "\12\0\6\12\3\0\1\12\2\0\1\12\4\0\4\12"+
                  "\1\0\1\12\2\0\2\12\1\0\1\140\7\12\4\0"+
                  "\11\12\12\0\6\12\3\0\1\12\21\100\1\0\11\100"+
                  "\2\0\36\100\35\141\1\142\35\141\2\0\1\12\4\0"+
                  "\4\12\1\0\1\12\2\0\2\12\1\0\10\12\4\0"+
                  "\4\12\1\143\4\12\12\0\6\12\3\0\1\12\2\0"+
                  "\1\12\4\0\4\12\1\0\1\12\2\0\2\12\1\0"+
                  "\6\12\1\144\1\12\4\0\11\12\12\0\6\12\3\0"+
                  "\1\12\2\0\1\12\4\0\4\12\1\0\1\12\2\0"+
                  "\2\12\1\0\1\145\7\12\4\0\11\12\12\0\6\12"+
                  "\3\0\1\12\2\0\1\12\4\0\4\12\1\0\1\12"+
                  "\2\0\2\12\1\0\1\146\7\12\4\0\11\12\12\0"+
                  "\6\12\3\0\1\12\2\0\1\12\4\0\4\12\1\0"+
                  "\1\12\2\0\1\12\1\147\1\0\10\12\4\0\11\12"+
                  "\12\0\6\12\3\0\1\12\2\0\1\12\4\0\4\12"+
                  "\1\0\1\12\2\0\2\12\1\0\6\12\1\150\1\12"+
                  "\4\0\11\12\12\0\6\12\3\0\1\12\2\0\1\12"+
                  "\4\0\4\12\1\0\1\12\2\0\2\12\1\0\10\12"+
                  "\4\0\5\12\1\151\3\12\12\0\6\12\3\0\1\12"+
                  "\2\0\1\12\4\0\4\12\1\0\1\12\2\0\2\12"+
                  "\1\0\10\12\4\0\7\12\1\152\1\12\12\0\6\12"+
                  "\3\0\1\12\2\0\1\12\4\0\4\12\1\0\1\12"+
                  "\2\0\2\12\1\0\3\12\1\153\4\12\4\0\11\12"+
                  "\12\0\6\12\3\0\1\12\2\0\1\12\4\0\4\12"+
                  "\1\0\1\12\2\0\2\12\1\0\3\12\1\154\4\12"+
                  "\4\0\11\12\12\0\6\12\3\0\1\12\2\0\1\12"+
                  "\4\0\4\12\1\0\1\12\2\0\2\12\1\0\3\12"+
                  "\1\155\4\12\4\0\11\12\12\0\6\12\3\0\1\12"+
                  "\2\0\1\12\4\0\4\12\1\0\1\12\2\0\2\12"+
                  "\1\0\10\12\4\0\5\12\1\156\3\12\12\0\6\12"+
                  "\3\0\1\12\2\0\1\12\4\0\4\12\1\0\1\12"+
                  "\2\0\2\12\1\0\2\12\1\157\5\12\4\0\11\12"+
                  "\12\0\6\12\3\0\1\12\2\0\1\12\4\0\4\12"+
                  "\1\0\1\12\2\0\2\12\1\0\3\12\1\160\4\12"+
                  "\4\0\11\12\12\0\6\12\3\0\1\12\2\0\1\12"+
                  "\4\0\4\12\1\0\1\12\2\0\2\12\1\0\4\12"+
                  "\1\161\1\12\1\162\1\12\4\0\3\12\1\163\5\12"+
                  "\12\0\1\164\5\12\3\0\1\12\2\0\1\12\4\0"+
                  "\4\12\1\0\1\12\2\0\2\12\1\0\3\12\1\165"+
                  "\4\12\4\0\11\12\12\0\6\12\3\0\1\12\2\0"+
                  "\1\12\4\0\4\12\1\0\1\12\2\0\2\12\1\0"+
                  "\1\166\7\12\4\0\11\12\12\0\6\12\3\0\1\12"+
                  "\2\0\1\12\4\0\4\12\1\0\1\12\2\0\2\12"+
                  "\1\0\10\12\4\0\7\12\1\167\1\12\12\0\6\12"+
                  "\3\0\1\12\2\0\1\12\4\0\4\12\1\0\1\12"+
                  "\2\0\2\12\1\0\7\12\1\121\4\0\11\12\12\0"+
                  "\6\12\3\0\1\12\2\0\1\12\4\0\4\12\1\0"+
                  "\1\12\2\0\2\12\1\0\5\12\1\170\2\12\4\0"+
                  "\11\12\12\0\6\12\3\0\1\12\2\0\1\12\4\0"+
                  "\4\12\1\0\1\12\2\0\2\12\1\0\10\12\4\0"+
                  "\11\12\12\0\1\12\1\171\4\12\3\0\1\12\2\0"+
                  "\1\12\4\0\4\12\1\0\1\12\2\0\2\12\1\0"+
                  "\5\12\1\172\2\12\4\0\11\12\12\0\6\12\3\0"+
                  "\1\12\35\141\1\173\35\141\32\0\1\174\2\0\1\142"+
                  "\37\0\1\12\4\0\4\12\1\0\1\12\2\0\1\12"+
                  "\1\175\1\0\10\12\4\0\11\12\12\0\6\12\3\0"+
                  "\1\12\2\0\1\12\4\0\4\12\1\0\1\12\2\0"+
                  "\2\12\1\0\6\12\1\176\1\12\4\0\11\12\12\0"+
                  "\6\12\3\0\1\12\2\0\1\12\4\0\4\12\1\0"+
                  "\1\12\2\0\2\12\1\0\10\12\4\0\11\12\12\0"+
                  "\1\177\5\12\3\0\1\12\2\0\1\12\4\0\4\12"+
                  "\1\0\1\12\2\0\2\12\1\0\10\12\4\0\11\12"+
                  "\12\0\5\12\1\200\3\0\1\12\2\0\1\12\4\0"+
                  "\4\12\1\0\1\12\2\0\2\12\1\0\2\12\1\201"+
                  "\5\12\4\0\11\12\12\0\6\12\3\0\1\12\2\0"+
                  "\1\12\4\0\4\12\1\0\1\12\2\0\2\12\1\0"+
                  "\6\12\1\202\1\12\4\0\11\12\12\0\6\12\3\0"+
                  "\1\12\2\0\1\12\4\0\4\12\1\0\1\12\2\0"+
                  "\2\12\1\0\7\12\1\203\4\0\11\12\12\0\6\12"+
                  "\3\0\1\12\2\0\1\12\4\0\4\12\1\0\1\12"+
                  "\2\0\2\12\1\0\6\12\1\204\1\12\4\0\11\12"+
                  "\12\0\6\12\3\0\1\12\2\0\1\12\4\0\4\12"+
                  "\1\0\1\12\2\0\2\12\1\0\7\12\1\205\4\0"+
                  "\11\12\12\0\6\12\3\0\1\12\2\0\1\12\4\0"+
                  "\4\12\1\0\1\12\2\0\2\12\1\0\1\12\1\206"+
                  "\6\12\4\0\11\12\12\0\6\12\3\0\1\12\2\0"+
                  "\1\12\4\0\4\12\1\0\1\12\2\0\2\12\1\0"+
                  "\10\12\4\0\11\12\12\0\1\207\5\12\3\0\1\12"+
                  "\2\0\1\12\4\0\4\12\1\0\1\12\2\0\2\12"+
                  "\1\0\2\12\1\210\5\12\4\0\11\12\12\0\6\12"+
                  "\3\0\1\12\2\0\1\12\4\0\4\12\1\0\1\12"+
                  "\2\0\2\12\1\0\10\12\4\0\4\12\1\211\4\12"+
                  "\12\0\6\12\3\0\1\12\2\0\1\12\4\0\4\12"+
                  "\1\0\1\12\2\0\2\12\1\0\6\12\1\212\1\12"+
                  "\4\0\11\12\12\0\6\12\3\0\1\12\2\0\1\12"+
                  "\4\0\4\12\1\0\1\12\2\0\2\12\1\0\4\12"+
                  "\1\213\3\12\4\0\11\12\12\0\6\12\3\0\1\12"+
                  "\2\0\1\12\4\0\4\12\1\0\1\12\2\0\2\12"+
                  "\1\0\10\12\4\0\5\12\1\214\3\12\12\0\6\12"+
                  "\3\0\1\12\2\0\1\12\4\0\4\12\1\0\1\12"+
                  "\2\0\2\12\1\0\10\12\4\0\11\12\12\0\6\12"+
                  "\3\0\1\215\2\0\1\12\4\0\4\12\1\0\1\12"+
                  "\2\0\2\12\1\0\1\216\7\12\4\0\11\12\12\0"+
                  "\6\12\3\0\1\12\2\0\1\12\4\0\4\12\1\0"+
                  "\1\12\2\0\2\12\1\0\10\12\4\0\10\12\1\217"+
                  "\12\0\6\12\3\0\1\12\2\0\1\12\4\0\4\12"+
                  "\1\0\1\12\2\0\2\12\1\0\6\12\1\220\1\12"+
                  "\4\0\11\12\12\0\6\12\3\0\1\12\32\141\1\174"+
                  "\2\141\1\173\35\141\2\0\1\12\4\0\4\12\1\0"+
                  "\1\12\2\0\2\12\1\0\5\12\1\221\2\12\4\0"+
                  "\11\12\12\0\6\12\3\0\1\12\2\0\1\12\4\0"+
                  "\4\12\1\0\1\12\2\0\2\12\1\0\10\12\4\0"+
                  "\11\12\12\0\3\12\1\222\2\12\3\0\1\12\2\0"+
                  "\1\12\4\0\4\12\1\0\1\12\2\0\2\12\1\0"+
                  "\10\12\4\0\11\12\12\0\1\223\5\12\3\0\1\12"+
                  "\2\0\1\12\4\0\4\12\1\0\1\12\2\0\2\12"+
                  "\1\0\10\12\4\0\3\12\1\224\5\12\12\0\6\12"+
                  "\3\0\1\12\2\0\1\12\4\0\4\12\1\0\1\12"+
                  "\2\0\2\12\1\0\1\225\7\12\4\0\11\12\12\0"+
                  "\6\12\3\0\1\12\2\0\1\12\4\0\4\12\1\0"+
                  "\1\12\2\0\2\12\1\0\2\12\1\226\5\12\4\0"+
                  "\11\12\12\0\6\12\3\0\1\12\2\0\1\12\4\0"+
                  "\4\12\1\0\1\12\2\0\2\12\1\0\10\12\4\0"+
                  "\5\12\1\227\3\12\12\0\6\12\3\0\1\12\2\0"+
                  "\1\12\4\0\4\12\1\0\1\12\2\0\2\12\1\0"+
                  "\4\12\1\230\3\12\4\0\11\12\12\0\6\12\3\0"+
                  "\1\12\2\0\1\12\4\0\4\12\1\0\1\12\2\0"+
                  "\2\12\1\0\10\12\4\0\5\12\1\231\3\12\12\0"+
                  "\6\12\3\0\1\12\2\0\1\12\4\0\4\12\1\0"+
                  "\1\12\2\0\2\12\1\0\10\12\4\0\4\12\1\232"+
                  "\4\12\12\0\6\12\3\0\1\12\2\0\1\12\4\0"+
                  "\4\12\1\0\1\12\2\0\2\12\1\0\10\12\4\0"+
                  "\4\12\1\233\4\12\12\0\6\12\3\0\1\12\2\0"+
                  "\1\12\4\0\4\12\1\0\1\12\2\0\2\12\1\0"+
                  "\10\12\4\0\6\12\1\234\2\12\12\0\6\12\3\0"+
                  "\1\12\2\0\1\12\4\0\4\12\1\0\1\12\2\0"+
                  "\2\12\1\0\10\12\4\0\11\12\12\0\5\12\1\235"+
                  "\3\0\1\12\2\0\1\12\4\0\4\12\1\0\1\12"+
                  "\2\0\2\12\1\0\10\12\4\0\11\12\12\0\1\236"+
                  "\5\12\3\0\1\12\2\0\1\12\4\0\4\12\1\0"+
                  "\1\12\2\0\2\12\1\0\6\12\1\237\1\12\4\0"+
                  "\11\12\12\0\6\12\3\0\1\12\2\0\1\12\4\0"+
                  "\4\12\1\0\1\12\2\0\2\12\1\0\3\12\1\240"+
                  "\4\12\4\0\11\12\12\0\6\12\3\0\1\12\2\0"+
                  "\1\12\4\0\4\12\1\0\1\12\2\0\2\12\1\0"+
                  "\10\12\4\0\5\12\1\241\3\12\12\0\6\12\3\0"+
                  "\1\12\2\0\1\12\4\0\4\12\1\0\1\12\2\0"+
                  "\2\12\1\0\5\12\1\242\2\12\4\0\11\12\12\0"+
                  "\6\12\3\0\1\12\2\0\1\12\4\0\4\12\1\0"+
                  "\1\12\2\0\2\12\1\0\10\12\4\0\6\12\1\243"+
                  "\2\12\12\0\6\12\3\0\1\12\2\0\1\12\4\0"+
                  "\4\12\1\0\1\12\2\0\2\12\1\0\7\12\1\244"+
                  "\4\0\11\12\12\0\6\12\3\0\1\12\2\0\1\12"+
                  "\4\0\4\12\1\0\1\12\2\0\2\12\1\0\10\12"+
                  "\4\0\7\12\1\245\1\12\12\0\6\12\3\0\1\12"+
                  "\2\0\1\12\4\0\4\12\1\0\1\12\2\0\2\12"+
                  "\1\0\10\12\4\0\11\12\12\0\1\12\1\246\4\12"+
                  "\3\0\1\12\2\0\1\12\4\0\4\12\1\0\1\12"+
                  "\2\0\1\12\1\247\1\0\10\12\4\0\11\12\12\0"+
                  "\6\12\3\0\1\12\2\0\1\12\4\0\4\12\1\0"+
                  "\1\12\2\0\2\12\1\0\7\12\1\250\4\0\11\12"+
                  "\12\0\6\12\3\0\1\12\2\0\1\12\4\0\4\12"+
                  "\1\0\1\12\2\0\2\12\1\0\3\12\1\251\4\12"+
                  "\4\0\11\12\12\0\6\12\3\0\1\12\2\0\1\12"+
                  "\4\0\4\12\1\0\1\12\2\0\2\12\1\0\10\12"+
                  "\4\0\4\12\1\252\4\12\12\0\6\12\3\0\1\12"+
                  "\2\0\1\12\4\0\4\12\1\0\1\12\2\0\2\12"+
                  "\1\0\7\12\1\253\4\0\11\12\12\0\6\12\3\0"+
                  "\1\12\2\0\1\12\4\0\4\12\1\0\1\12\2\0"+
                  "\2\12\1\0\10\12\4\0\3\12\1\254\5\12\12\0"+
                  "\6\12\3\0\1\12\2\0\1\12\4\0\4\12\1\0"+
                  "\1\12\2\0\2\12\1\0\10\12\4\0\5\12\1\255"+
                  "\3\12\12\0\6\12\3\0\1\12\2\0\1\12\4\0"+
                  "\4\12\1\0\1\12\2\0\2\12\1\0\3\12\1\256"+
                  "\4\12\4\0\11\12\12\0\6\12\3\0\1\12\2\0"+
                  "\1\12\4\0\4\12\1\0\1\12\2\0\2\12\1\0"+
                  "\1\257\7\12\4\0\11\12\12\0\6\12\3\0\1\12"+
                  "\2\0\1\12\4\0\4\12\1\0\1\12\2\0\2\12"+
                  "\1\0\5\12\1\260\2\12\4\0\11\12\12\0\6\12"+
                  "\3\0\1\12\2\0\1\12\4\0\4\12\1\0\1\12"+
                  "\2\0\2\12\1\0\10\12\4\0\5\12\1\261\3\12"+
                  "\12\0\6\12\3\0\1\12\2\0\1\12\4\0\4\12"+
                  "\1\0\1\12\2\0\2\12\1\0\10\12\4\0\5\12"+
                  "\1\262\3\12\12\0\6\12\3\0\1\12\2\0\1\12"+
                  "\4\0\4\12\1\0\1\12\2\0\2\12\1\0\1\263"+
                  "\7\12\4\0\11\12\12\0\6\12\3\0\1\12\2\0"+
                  "\1\12\4\0\4\12\1\0\1\12\2\0\2\12\1\0"+
                  "\10\12\4\0\11\12\12\0\1\264\5\12\3\0\1\12"+
                  "\2\0\1\12\4\0\4\12\1\0\1\12\2\0\2\12"+
                  "\1\0\6\12\1\265\1\12\4\0\11\12\12\0\6\12"+
                  "\3\0\1\12\2\0\1\12\4\0\4\12\1\0\1\12"+
                  "\2\0\2\12\1\0\10\12\4\0\4\12\1\266\4\12"+
                  "\12\0\6\12\3\0\1\12\2\0\1\12\4\0\4\12"+
                  "\1\0\1\12\2\0\2\12\1\0\7\12\1\267\4\0"+
                  "\11\12\12\0\6\12\3\0\1\12\2\0\1\12\4\0"+
                  "\4\12\1\0\1\12\2\0\2\12\1\0\10\12\4\0"+
                  "\5\12\1\270\3\12\12\0\6\12\3\0\1\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7906];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\2\0\1\11\21\1\1\11\6\1\11\11\4\1\1\0"+
                  "\1\1\1\0\1\1\1\0\1\1\1\0\1\11\1\0"+
                  "\17\1\1\0\10\1\1\11\2\1\4\11\20\1\2\0"+
                  "\30\1\1\0\1\11\74\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public JassLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JassLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
          { return BAD_CHARACTER;
          }
          // fall through
          case 61: break;
          case 2:
          { return WHITE_SPACE;
          }
          // fall through
          case 62: break;
          case 3:
          { return DEC_INT_LITERAL;
          }
          // fall through
          case 63: break;
          case 4:
          { return ID;
          }
          // fall through
          case 64: break;
          case 5:
          { return DIV;
          }
          // fall through
          case 65: break;
          case 6:
          { return MUL;
          }
          // fall through
          case 66: break;
          case 7:
          { return ASSIGN_OP;
          }
          // fall through
          case 67: break;
          case 8:
          { return PLUS;
          }
          // fall through
          case 68: break;
          case 9:
          { return MINUS;
          }
          // fall through
          case 69: break;
          case 10:
          { return MOD;
          }
          // fall through
          case 70: break;
          case 11:
          { return LPAREN;
          }
          // fall through
          case 71: break;
          case 12:
          { return RPAREN;
          }
          // fall through
          case 72: break;
          case 13:
          { return COMMA;
          }
          // fall through
          case 73: break;
          case 14:
          { return LBRACKET;
          }
          // fall through
          case 74: break;
          case 15:
          { return RBRACKET;
          }
          // fall through
          case 75: break;
          case 16:
          { return NUMBER_SIGN;
          }
          // fall through
          case 76: break;
          case 17:
          { return GREATER;
          }
          // fall through
          case 77: break;
          case 18:
          { return LESS;
          }
          // fall through
          case 78: break;
          case 19:
          { return REAL_LITERAL;
          }
          // fall through
          case 79: break;
          case 20:
          { return OCT_INT_LITERAL;
          }
          // fall through
          case 80: break;
          case 21:
          { return HEX_INT_LITERAL;
          }
          // fall through
          case 81: break;
          case 22:
          { return STRING_LITERAL;
          }
          // fall through
          case 82: break;
          case 23:
          { return EOL_COMMENT;
          }
          // fall through
          case 83: break;
          case 24:
          { return OR;
          }
          // fall through
          case 84: break;
          case 25:
          { return EQUAL;
          }
          // fall through
          case 85: break;
          case 26:
          { return IF;
          }
          // fall through
          case 86: break;
          case 27:
          { return GREATER_EQUAL;
          }
          // fall through
          case 87: break;
          case 28:
          { return UNEQUAL;
          }
          // fall through
          case 88: break;
          case 29:
          { return LESS_EQUAL;
          }
          // fall through
          case 89: break;
          case 30:
          { return ID_INT_LITERAL;
          }
          // fall through
          case 90: break;
          case 31:
          { return AND;
          }
          // fall through
          case 91: break;
          case 32:
          { return SET;
          }
          // fall through
          case 92: break;
          case 33:
          { return NOT;
          }
          // fall through
          case 93: break;
          case 34:
          { return BOOL_LITERAL;
          }
          // fall through
          case 94: break;
          case 35:
          { return TYPE;
          }
          // fall through
          case 95: break;
          case 36:
          { return THEN;
          }
          // fall through
          case 96: break;
          case 37:
          { return ELSE;
          }
          // fall through
          case 97: break;
          case 38:
          { return LOOP;
          }
          // fall through
          case 98: break;
          case 39:
          { return MUL_COMMENT;
          }
          // fall through
          case 99: break;
          case 40:
          { return NULL;
          }
          // fall through
          case 100: break;
          case 41:
          { return CALL;
          }
          // fall through
          case 101: break;
          case 42:
          { return TAKES;
          }
          // fall through
          case 102: break;
          case 43:
          { return ENDIF;
          }
          // fall through
          case 103: break;
          case 44:
          { return ARRAY;
          }
          // fall through
          case 104: break;
          case 45:
          { return LOCAL;
          }
          // fall through
          case 105: break;
          case 46:
          { return DEBUG;
          }
          // fall through
          case 106: break;
          case 47:
          { return RETURN;
          }
          // fall through
          case 107: break;
          case 48:
          { return ELSEIF;
          }
          // fall through
          case 108: break;
          case 49:
          { return NATIVE;
          }
          // fall through
          case 109: break;
          case 50:
          { return RETURNS;
          }
          // fall through
          case 110: break;
          case 51:
          { return ENDLOOP;
          }
          // fall through
          case 111: break;
          case 52:
          { return EXTENDS;
          }
          // fall through
          case 112: break;
          case 53:
          { return GLOBALS;
          }
          // fall through
          case 113: break;
          case 54:
          { return NOTHING;
          }
          // fall through
          case 114: break;
          case 55:
          { return INCLUDE;
          }
          // fall through
          case 115: break;
          case 56:
          { return EXITWHEN;
          }
          // fall through
          case 116: break;
          case 57:
          { return FUNCTION;
          }
          // fall through
          case 117: break;
          case 58:
          { return CONSTANT;
          }
          // fall through
          case 118: break;
          case 59:
          { return ENDGLOBALS;
          }
          // fall through
          case 119: break;
          case 60:
          { return ENDFUNCTION;
          }
          // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
