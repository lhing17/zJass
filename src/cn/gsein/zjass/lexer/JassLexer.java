/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package cn.gsein.zjass.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static cn.gsein.zjass.psi.JassTypes.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Jass.flex</tt>
 */
public class JassLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0,  0,  1, 1
  };

  /**
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15760 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
          "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
                  "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
                  "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
                  "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\26\1\60\1\61\5\21"+
                  "\2\26\1\62\7\21\1\26\1\63\20\21\1\26\1\64\1\21\1\65\13\26\1\66\1\26\1\67\22"+
                  "\21\1\70\5\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100"+
                  "\2\21\1\101\1\102\7\21\123\26\1\103\7\26\1\104\1\105\12\26\1\106\24\21\1\26"+
                  "\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
          "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15\3\0\1\16"+
                  "\1\17\1\20\1\17\2\21\1\22\3\21\1\22\71\21\1\23\1\21\1\24\1\0\1\25\1\26\2\0"+
                  "\16\21\1\27\1\30\1\31\1\32\2\21\1\33\11\21\1\34\21\21\1\33\25\21\1\35\3\21"+
                  "\1\22\1\36\1\35\4\21\1\0\1\35\4\21\1\34\1\37\1\0\3\21\2\40\3\0\1\21\1\40\10"+
                  "\21\1\4\1\41\14\21\1\42\1\43\1\21\1\44\1\4\1\45\2\0\7\21\1\46\14\21\1\24\1"+
                  "\0\1\4\1\47\4\21\1\50\1\17\5\21\1\50\2\0\3\21\1\51\10\0\2\21\1\27\1\50\2\0"+
                  "\1\52\1\21\1\33\17\21\1\53\1\4\1\35\1\21\1\42\1\43\1\54\2\21\1\44\1\55\1\56"+
                  "\1\43\1\57\1\60\1\61\1\53\1\4\1\24\1\0\1\62\1\63\1\54\2\21\1\44\1\64\1\65"+
                  "\1\63\1\66\1\36\1\67\1\70\1\4\1\50\1\0\1\62\1\34\1\33\2\21\1\44\1\71\1\56"+
                  "\1\34\1\72\1\73\1\0\1\53\1\4\1\0\1\36\1\62\1\43\1\54\2\21\1\44\1\71\1\56\1"+
                  "\43\1\66\1\74\1\61\1\53\1\4\1\36\1\0\1\75\1\76\1\77\1\100\1\101\1\76\1\21"+
                  "\1\23\1\76\1\77\1\102\1\0\1\70\1\4\2\0\1\42\1\27\1\44\2\21\1\44\1\21\1\103"+
                  "\1\27\1\77\1\104\1\40\1\53\1\4\2\0\1\42\1\27\1\44\2\21\1\44\1\42\1\56\1\27"+
                  "\1\77\1\104\1\31\1\53\1\4\1\105\1\0\1\62\1\27\1\44\4\21\1\46\1\27\1\106\1"+
                  "\52\1\60\1\53\1\4\1\0\1\107\1\75\1\21\1\22\1\107\2\21\1\33\1\110\1\22\1\111"+
                  "\1\112\1\21\1\70\1\4\1\113\1\0\1\35\6\21\1\40\1\21\1\22\1\4\1\114\4\0\1\115"+
                  "\1\116\1\52\1\35\1\117\1\75\1\21\1\72\1\112\1\50\1\4\1\120\4\0\1\73\2\0\1"+
                  "\24\1\4\1\114\1\121\1\122\1\21\1\35\3\21\1\25\1\35\1\21\1\27\2\21\1\35\3\21"+
                  "\1\25\1\31\7\0\10\21\1\4\1\114\10\21\1\4\1\123\4\21\1\34\1\20\5\21\1\124\51"+
                  "\21\1\77\1\22\1\77\5\21\1\77\4\21\1\77\1\22\1\77\1\21\1\22\7\21\1\77\10\21"+
                  "\1\46\4\0\2\21\2\0\12\21\2\50\1\35\114\21\1\43\2\21\1\125\2\21\1\40\11\21"+
                  "\1\76\1\21\1\73\1\21\1\27\1\25\1\0\2\21\1\25\1\0\2\21\1\51\1\0\1\21\1\27\1"+
                  "\126\1\0\12\21\1\127\1\130\1\4\1\114\3\0\1\131\1\4\1\114\13\21\1\0\5\21\1"+
                  "\40\10\21\1\50\1\0\3\21\1\22\1\21\1\51\1\21\1\51\1\70\1\4\3\21\1\50\1\25\1"+
                  "\0\5\21\1\51\3\21\1\24\1\4\1\114\4\0\3\21\1\51\7\21\1\22\3\21\1\43\1\4\1\114"+
                  "\1\4\1\114\1\60\1\0\1\21\1\22\10\0\11\21\1\51\1\4\1\114\1\0\1\132\1\51\1\0"+
                  "\6\21\1\4\1\47\6\21\1\51\1\0\7\21\1\0\1\4\1\133\1\4\1\47\3\21\1\50\1\21\1"+
                  "\73\10\0\1\124\3\21\1\22\1\24\36\21\1\50\1\132\42\21\2\50\4\21\2\50\1\21\1"+
                  "\134\3\21\1\50\6\21\1\27\1\112\1\135\1\25\1\136\1\51\1\21\1\25\1\135\1\25"+
                  "\1\137\1\140\3\0\1\141\1\0\1\60\1\73\1\0\1\142\1\143\2\0\1\36\1\60\2\0\1\21"+
                  "\1\25\6\0\4\21\1\73\1\0\1\111\1\107\1\110\1\144\1\26\1\145\1\21\1\56\1\146"+
                  "\1\147\2\0\5\21\1\73\144\0\1\74\6\21\1\24\42\0\5\21\1\22\5\21\1\22\20\21\1"+
                  "\25\1\132\1\51\1\0\4\21\1\34\1\20\7\21\1\60\1\0\1\60\2\21\1\22\1\0\10\22\4"+
                  "\21\5\0\1\60\72\0\1\150\3\0\1\35\1\21\1\144\1\25\1\35\11\21\1\22\1\151\1\35"+
                  "\12\21\1\124\1\146\4\21\1\50\1\35\12\21\1\22\2\0\3\21\1\40\6\0\170\21\1\50"+
                  "\11\0\72\21\1\50\5\0\21\21\1\25\10\0\5\21\1\50\41\21\1\25\2\21\1\4\1\152\2"+
                  "\0\6\21\1\124\1\34\16\21\1\24\3\0\1\60\1\21\1\107\14\21\1\54\3\21\1\22\1\21"+
                  "\7\0\1\60\6\21\3\0\6\21\1\51\1\0\10\21\1\50\1\0\1\4\1\114\3\21\1\153\1\4\1"+
                  "\47\3\21\1\50\4\21\1\51\1\0\3\21\1\25\10\21\1\73\1\60\1\4\1\114\2\21\1\4\1"+
                  "\154\6\21\1\22\1\0\1\21\1\50\1\4\1\114\2\21\1\22\1\107\10\21\1\40\2\0\1\131"+
                  "\2\21\1\155\1\0\3\156\1\0\2\22\5\21\1\124\1\50\1\0\17\21\1\157\1\4\1\114\64"+
                  "\21\1\51\1\0\2\21\1\22\1\132\5\21\1\51\40\0\55\21\1\50\15\21\1\24\4\0\1\22"+
                  "\1\0\1\132\1\146\1\21\1\44\1\22\1\112\1\160\15\21\1\24\3\0\1\132\54\21\1\50"+
                  "\2\0\10\21\1\107\6\21\5\0\1\21\1\51\2\21\2\0\2\21\1\101\2\0\1\146\4\0\1\27"+
                  "\20\21\1\25\2\0\1\4\1\114\1\35\2\21\1\63\1\35\2\21\1\40\1\74\12\21\1\22\3"+
                  "\107\1\161\4\0\1\21\1\42\2\21\1\22\2\21\1\162\1\21\1\50\1\21\1\50\4\0\17\21"+
                  "\1\40\10\0\6\21\1\25\20\0\1\20\20\0\3\21\1\25\6\21\1\73\1\0\1\73\3\0\4\21"+
                  "\2\0\3\21\1\40\5\21\1\40\3\21\1\50\4\21\1\51\1\21\1\144\5\0\23\21\1\50\1\4"+
                  "\1\114\4\21\1\51\4\21\1\51\5\21\1\0\6\21\1\51\23\0\46\21\1\22\1\0\2\21\1\50"+
                  "\1\0\1\21\23\0\1\50\1\44\4\21\1\34\1\163\2\21\1\50\1\0\2\21\1\22\1\0\3\21"+
                  "\1\22\10\0\2\21\1\157\1\0\2\21\1\50\1\0\3\21\1\24\10\0\7\21\1\74\10\0\1\164"+
                  "\1\52\1\42\1\35\2\21\1\51\1\63\4\0\3\21\1\25\3\21\1\25\4\0\1\21\1\35\2\21"+
                  "\1\22\3\0\6\21\1\50\1\0\2\21\1\50\1\0\2\21\1\40\1\0\2\21\1\24\15\0\11\21\1"+
                  "\73\6\0\6\21\1\40\1\0\6\21\1\40\41\0\10\21\1\22\3\0\1\70\1\4\1\0\1\60\7\21"+
                  "\1\40\2\0\3\21\1\73\1\4\1\114\6\21\1\165\1\4\2\0\4\21\1\166\1\0\10\21\1\25"+
                  "\1\161\1\4\1\167\4\0\2\21\1\33\4\21\1\31\10\0\1\22\1\145\1\21\1\34\1\21\1"+
                  "\73\7\21\1\40\1\4\1\114\1\42\1\43\1\54\2\21\1\44\1\71\1\56\1\43\1\66\1\102"+
                  "\1\146\1\136\2\25\21\0\11\21\1\40\1\4\1\114\4\0\10\21\1\34\1\0\1\4\1\114\24"+
                  "\0\6\21\1\50\1\21\1\73\2\0\1\50\4\0\10\21\1\170\1\0\1\4\1\114\4\0\7\21\1\0"+
                  "\1\4\1\114\6\0\3\21\1\103\1\21\1\51\1\4\1\114\54\0\10\21\1\4\1\114\1\0\1\60"+
                  "\70\0\7\21\1\73\40\0\1\21\1\44\4\21\1\22\1\21\1\73\1\0\1\4\1\114\2\0\1\107"+
                  "\3\21\1\107\2\21\1\35\1\22\51\0\63\21\1\24\14\0\15\21\1\22\2\0\30\21\1\51"+
                  "\27\0\5\21\1\22\72\0\10\21\1\22\67\0\7\21\1\73\3\21\1\22\1\4\1\114\14\0\3"+
                  "\21\1\50\1\25\1\0\6\21\1\22\1\0\1\51\1\0\1\4\1\114\1\132\2\21\1\146\2\21\56"+
                  "\0\10\21\1\25\1\0\5\21\1\22\1\0\1\60\2\21\10\0\1\73\3\0\75\21\1\25\2\0\36"+
                  "\21\1\40\41\0\1\24\77\0\15\21\1\40\1\21\1\25\1\21\1\73\1\21\1\171\130\0\1"+
                  "\146\1\103\1\40\1\132\1\46\1\51\3\0\1\172\22\0\1\161\67\0\12\21\1\27\10\21"+
                  "\1\27\1\173\1\174\1\21\1\175\1\42\7\21\1\34\1\46\2\27\3\21\1\176\1\112\1\107"+
                  "\1\44\51\21\1\50\3\21\1\44\2\21\1\124\3\21\1\124\2\21\1\27\3\21\1\27\2\21"+
                  "\1\22\3\21\1\22\3\21\1\44\3\21\1\44\2\21\1\124\1\53\6\4\6\21\1\22\1\132\5"+
                  "\21\1\25\1\20\1\0\1\142\2\0\1\132\1\35\1\21\52\0\1\22\2\21\1\54\1\160\1\40"+
                  "\72\0\30\21\1\25\1\0\1\22\5\0\11\21\1\40\1\4\1\114\24\0\1\42\3\21\1\115\1"+
                  "\35\1\124\1\177\1\111\1\200\1\115\1\134\1\115\2\124\1\67\1\21\1\33\1\21\1"+
                  "\51\1\62\1\33\1\21\1\51\116\0\3\21\1\24\3\21\1\24\3\21\1\24\16\0\32\21\1\22"+
                  "\5\0\106\21\1\25\1\0\33\21\1\50\120\21\1\24\53\0\3\21\1\50\134\0\36\21\2\0");

  /* The ZZ_CMAP_A table has 1032 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
          "\11\0\1\2\4\1\2\0\1\2\1\0\1\6\1\44\1\3\3\0\1\41\1\42\1\10\1\37\1\43\1\40\1"+
                  "\5\1\7\12\4\2\0\1\51\1\36\1\50\2\0\22\11\4\0\1\11\1\0\1\21\1\34\1\30\1\25"+
                  "\1\16\1\47\1\17\1\46\1\13\1\11\1\45\1\22\1\24\1\14\1\26\1\31\1\11\1\20\1\23"+
                  "\1\15\1\27\1\33\1\52\1\35\1\32\1\11\12\0\1\1\2\0\1\2\11\0\1\12\12\0\1\12\2"+
                  "\0\17\12\1\0\2\12\4\0\4\12\6\0\5\12\7\0\1\12\1\0\1\12\1\0\5\12\1\0\2\12\2"+
                  "\0\4\12\1\0\1\12\6\0\1\12\1\0\3\12\1\0\1\12\1\0\4\12\1\0\13\12\1\0\1\12\1"+
                  "\0\7\12\1\0\1\12\7\0\2\12\1\0\2\12\1\0\4\12\5\0\2\4\4\0\6\12\1\0\10\12\2\0"+
                  "\2\12\1\0\6\12\2\4\3\12\2\0\4\12\2\0\3\12\2\4\14\12\2\0\4\12\10\0\10\12\2"+
                  "\0\2\4\1\12\2\0\6\12\1\0\1\12\3\0\4\12\2\0\5\12\2\0\4\12\10\0\1\12\4\0\2\12"+
                  "\1\0\1\12\1\0\3\12\1\0\6\12\4\0\2\12\1\0\2\12\1\0\2\12\1\0\2\12\2\0\1\12\1"+
                  "\0\3\12\2\0\3\12\3\0\4\12\1\0\1\12\7\0\2\4\1\12\1\0\2\12\1\0\5\12\1\0\3\12"+
                  "\2\0\1\12\15\0\2\12\2\0\2\12\1\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12\1\0\1\12"+
                  "\1\0\2\12\3\0\2\12\3\0\1\12\6\0\3\12\3\0\3\12\5\0\2\12\2\0\2\12\5\0\1\12\1"+
                  "\0\5\12\3\0\12\12\1\0\1\12\4\0\1\12\4\0\6\12\1\0\1\12\3\0\2\12\4\0\2\4\7\0"+
                  "\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0\1\12\3\0\3\12\1\0\1\12\1\0\1\12\2\4\2"+
                  "\0\4\12\5\0\1\12\1\0\1\12\1\0\1\12\4\0\2\12\2\4\4\12\2\0\3\12\1\0\4\12\1\2"+
                  "\10\12\1\0\2\12\4\0\4\12\3\0\1\12\4\0\2\12\5\0\3\12\5\0\5\12\2\4\3\0\3\12"+
                  "\1\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\2\0\3\12\1\0\6\12\2\0\2\12\13\2\5\0\2"+
                  "\1\5\0\1\2\4\0\1\12\12\0\1\2\1\0\5\12\2\0\1\12\1\0\4\12\1\0\1\12\5\0\5\12"+
                  "\4\0\1\12\1\0\1\2\4\0\3\12\1\0\2\12\2\0\3\12\2\4\2\12\7\0\1\12\1\0\1\12\2"+
                  "\0\2\4\5\12\3\0\5\12\2\0\6\12\1\0\3\12\1\0\2\12\2\0\2\12\1\0\2\12\1\0\2\12"+
                  "\2\0\3\12\3\0\3\12\1\0\2\12\1\0\2\12\3\0\1\12\2\0\5\12\1\0\2\12\1\0\5\12\1"+
                  "\0\2\4\4\12\2\0\1\12\1\0\2\4\1\12\1\0\1\12\3\0\1\12\3\0\1\12\3\0\2\12\3\0"+
                  "\2\12\3\0\4\12\4\0\1\12\2\0\2\12\2\0\4\12\1\0\4\12\1\0\1\12\1\0\5\12\1\0\4"+
                  "\12\2\0\1\12\1\0\1\12\5\0\1\12\1\0\1\12\1\0\3\12");

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\1\0\1\1\1\2\1\3\1\2\1\4\1\5\1\6"+
                  "\1\7\16\10\1\11\1\12\1\13\1\14\1\15\1\16"+
                  "\1\17\1\10\1\20\1\21\1\1\1\22\1\4\1\23"+
                  "\1\24\1\0\2\10\1\25\31\10\1\26\1\10\1\27"+
                  "\1\30\2\0\4\10\1\31\24\10\1\32\6\10\1\0"+
                  "\1\33\2\10\1\34\2\10\1\35\3\10\1\36\1\37"+
                  "\4\10\1\40\6\10\1\41\2\10\1\42\7\10\1\34"+
                  "\1\10\1\43\1\44\10\10\1\45\1\10\1\46\6\10"+
                  "\1\47\5\10\1\50\3\10\1\51\4\10\1\52\1\53"+
                  "\2\10\1\54\2\10\1\55\1\56\1\57\5\10\1\60"+
                  "\1\61\1\62\3\10\1\63\1\10\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\53\0\126\0\201\0\254\0\327\0\126\0\u0102"+
                  "\0\126\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f"+
                  "\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387"+
                  "\0\126\0\126\0\126\0\126\0\126\0\126\0\u03b2\0\u03dd"+
                  "\0\u0408\0\u0433\0\126\0\254\0\u045e\0\u0489\0\u04b4\0\u04df"+
                  "\0\u050a\0\u012d\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c"+
                  "\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764"+
                  "\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc"+
                  "\0\u08e7\0\u0912\0\u093d\0\126\0\u0968\0\126\0\126\0\u0993"+
                  "\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb"+
                  "\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43"+
                  "\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b"+
                  "\0\u0dc6\0\u0df1\0\u012d\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8"+
                  "\0\u0ef3\0\u0f1e\0\126\0\u0f49\0\u0f74\0\u012d\0\u0f9f\0\u0fca"+
                  "\0\u012d\0\u0ff5\0\u1020\0\u104b\0\u012d\0\u012d\0\u1076\0\u10a1"+
                  "\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178\0\u11a3\0\u11ce\0\u11f9"+
                  "\0\u1224\0\u012d\0\u124f\0\u127a\0\u012d\0\u12a5\0\u12d0\0\u12fb"+
                  "\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u012d\0\u012d"+
                  "\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\u152a\0\u1555"+
                  "\0\u012d\0\u1580\0\u012d\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657"+
                  "\0\u1682\0\u012d\0\u16ad\0\u16d8\0\u1703\0\u172e\0\u1759\0\u012d"+
                  "\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830\0\u185b\0\u1886\0\u18b1"+
                  "\0\u012d\0\u012d\0\u18dc\0\u1907\0\u012d\0\u1932\0\u195d\0\u012d"+
                  "\0\u012d\0\u012d\0\u1988\0\u19b3\0\u19de\0\u1a09\0\u1a34\0\u012d"+
                  "\0\u012d\0\u012d\0\u1a5f\0\u1a8a\0\u1ab5\0\u012d\0\u1ae0\0\u012d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\3\2\4\1\5\1\6\1\3\1\7\1\10\1\11"+
                  "\1\12\1\3\1\13\1\14\1\15\1\16\1\17\1\20"+
                  "\1\21\1\22\1\23\3\12\1\24\1\25\1\26\2\12"+
                  "\1\27\1\12\1\30\1\31\1\32\1\33\1\34\1\35"+
                  "\1\36\2\12\1\37\1\40\1\41\1\12\6\42\1\43"+
                  "\44\42\54\0\2\4\54\0\1\44\52\0\1\6\1\45"+
                  "\54\0\1\46\1\47\46\0\1\12\4\0\25\12\7\0"+
                  "\3\12\2\0\1\12\4\0\1\12\4\0\3\12\1\50"+
                  "\1\51\20\12\7\0\2\12\1\52\2\0\1\12\4\0"+
                  "\1\12\4\0\10\12\1\53\4\12\1\54\1\55\6\12"+
                  "\7\0\3\12\2\0\1\12\4\0\1\12\4\0\2\12"+
                  "\1\56\2\12\1\57\1\12\1\60\1\61\10\12\1\62"+
                  "\3\12\7\0\1\12\1\63\1\12\2\0\1\12\4\0"+
                  "\1\12\4\0\3\12\1\64\5\12\1\65\10\12\1\66"+
                  "\1\12\1\67\7\0\3\12\2\0\1\12\4\0\1\12"+
                  "\4\0\7\12\1\70\1\12\1\71\13\12\7\0\3\12"+
                  "\2\0\1\12\4\0\1\12\4\0\5\12\1\72\17\12"+
                  "\7\0\3\12\2\0\1\12\4\0\1\12\4\0\7\12"+
                  "\1\73\15\12\7\0\3\12\2\0\1\12\4\0\1\12"+
                  "\4\0\15\12\1\74\7\12\7\0\3\12\2\0\1\12"+
                  "\4\0\1\12\4\0\4\12\1\75\1\76\17\12\7\0"+
                  "\3\12\2\0\1\12\4\0\1\12\4\0\3\12\1\77"+
                  "\21\12\7\0\3\12\2\0\1\12\4\0\1\12\4\0"+
                  "\10\12\1\100\4\12\1\101\7\12\7\0\3\12\2\0"+
                  "\1\12\4\0\1\12\4\0\11\12\1\102\13\12\7\0"+
                  "\3\12\2\0\1\12\4\0\1\12\4\0\15\12\1\103"+
                  "\7\12\7\0\3\12\2\0\1\12\36\0\1\104\20\0"+
                  "\1\12\4\0\16\12\1\105\6\12\7\0\3\12\2\0"+
                  "\1\12\36\0\1\106\52\0\1\107\14\0\6\42\1\0"+
                  "\44\42\4\0\1\45\46\0\1\46\1\0\51\46\10\110"+
                  "\1\111\42\110\4\0\1\12\4\0\4\12\1\112\12\12"+
                  "\1\113\5\12\7\0\3\12\2\0\1\12\4\0\1\12"+
                  "\4\0\5\12\1\114\17\12\7\0\3\12\2\0\1\12"+
                  "\4\0\1\12\4\0\4\12\1\115\20\12\7\0\3\12"+
                  "\2\0\1\12\4\0\1\12\4\0\4\12\1\116\20\12"+
                  "\7\0\3\12\2\0\1\12\4\0\1\12\4\0\11\12"+
                  "\1\117\13\12\7\0\3\12\2\0\1\12\4\0\1\12"+
                  "\4\0\13\12\1\120\11\12\7\0\3\12\2\0\1\12"+
                  "\4\0\1\12\4\0\24\12\1\121\7\0\3\12\2\0"+
                  "\1\12\4\0\1\12\4\0\2\12\1\122\22\12\7\0"+
                  "\3\12\2\0\1\12\4\0\1\12\4\0\25\12\7\0"+
                  "\1\123\2\12\2\0\1\12\4\0\1\12\4\0\20\12"+
                  "\1\124\4\12\7\0\3\12\2\0\1\12\4\0\1\12"+
                  "\4\0\5\12\1\125\17\12\7\0\3\12\2\0\1\12"+
                  "\4\0\1\12\4\0\14\12\1\126\10\12\7\0\3\12"+
                  "\2\0\1\12\4\0\1\12\4\0\12\12\1\127\12\12"+
                  "\7\0\3\12\2\0\1\12\4\0\1\12\4\0\5\12"+
                  "\1\130\17\12\7\0\3\12\2\0\1\12\4\0\1\12"+
                  "\4\0\2\12\1\131\1\12\1\132\20\12\7\0\3\12"+
                  "\2\0\1\12\4\0\1\12\4\0\15\12\1\133\7\12"+
                  "\7\0\3\12\2\0\1\12\4\0\1\12\4\0\15\12"+
                  "\1\134\7\12\7\0\3\12\2\0\1\12\4\0\1\12"+
                  "\4\0\4\12\1\135\3\12\1\136\14\12\7\0\3\12"+
                  "\2\0\1\12\4\0\1\12\4\0\7\12\1\137\15\12"+
                  "\7\0\3\12\2\0\1\12\4\0\1\12\4\0\15\12"+
                  "\1\140\1\12\1\141\5\12\7\0\3\12\2\0\1\12"+
                  "\4\0\1\12\4\0\7\12\1\142\15\12\7\0\3\12"+
                  "\2\0\1\12\4\0\1\12\4\0\4\12\1\143\20\12"+
                  "\7\0\3\12\2\0\1\12\4\0\1\12\4\0\2\12"+
                  "\1\144\22\12\7\0\3\12\2\0\1\12\4\0\1\12"+
                  "\4\0\11\12\1\145\13\12\7\0\3\12\2\0\1\12"+
                  "\4\0\1\12\4\0\3\12\1\146\21\12\7\0\3\12"+
                  "\2\0\1\12\4\0\1\12\4\0\10\12\1\147\14\12"+
                  "\7\0\3\12\2\0\1\12\4\0\1\12\4\0\15\12"+
                  "\1\150\7\12\7\0\3\12\2\0\1\12\4\0\1\12"+
                  "\4\0\3\12\1\151\21\12\7\0\3\12\2\0\1\12"+
                  "\10\110\1\152\42\110\7\0\1\153\1\111\46\0\1\12"+
                  "\4\0\5\12\1\154\17\12\7\0\3\12\2\0\1\12"+
                  "\4\0\1\12\4\0\11\12\1\155\13\12\7\0\3\12"+
                  "\2\0\1\12\4\0\1\12\4\0\13\12\1\156\11\12"+
                  "\7\0\3\12\2\0\1\12\4\0\1\12\4\0\2\12"+
                  "\1\157\22\12\7\0\3\12\2\0\1\12\4\0\1\12"+
                  "\4\0\25\12\7\0\1\12\1\160\1\12\2\0\1\12"+
                  "\4\0\1\12\4\0\11\12\1\161\13\12\7\0\3\12"+
                  "\2\0\1\12\4\0\1\12\4\0\5\12\1\162\17\12"+
                  "\7\0\3\12\2\0\1\12\4\0\1\12\4\0\4\12"+
                  "\1\163\20\12\7\0\3\12\2\0\1\12\4\0\1\12"+
                  "\4\0\6\12\1\154\16\12\7\0\3\12\2\0\1\12"+
                  "\4\0\1\12\4\0\5\12\1\164\17\12\7\0\3\12"+
                  "\2\0\1\12\4\0\1\12\4\0\5\12\1\165\17\12"+
                  "\7\0\3\12\2\0\1\12\4\0\1\12\4\0\3\12"+
                  "\1\166\21\12\7\0\3\12\2\0\1\12\4\0\1\12"+
                  "\4\0\2\12\1\167\3\12\1\170\2\12\1\171\13\12"+
                  "\7\0\2\12\1\172\2\0\1\12\4\0\1\12\4\0"+
                  "\5\12\1\173\17\12\7\0\3\12\2\0\1\12\4\0"+
                  "\1\12\4\0\3\12\1\144\21\12\7\0\3\12\2\0"+
                  "\1\12\4\0\1\12\4\0\4\12\1\174\20\12\7\0"+
                  "\3\12\2\0\1\12\4\0\1\12\4\0\5\12\1\175"+
                  "\17\12\7\0\3\12\2\0\1\12\4\0\1\12\4\0"+
                  "\16\12\1\176\6\12\7\0\3\12\2\0\1\12\4\0"+
                  "\1\12\4\0\23\12\1\177\1\12\7\0\3\12\2\0"+
                  "\1\12\4\0\1\12\4\0\16\12\1\200\6\12\7\0"+
                  "\3\12\2\0\1\12\4\0\1\12\4\0\11\12\1\156"+
                  "\13\12\7\0\3\12\2\0\1\12\4\0\1\12\4\0"+
                  "\10\12\1\201\14\12\7\0\3\12\2\0\1\12\4\0"+
                  "\1\12\4\0\20\12\1\202\4\12\7\0\3\12\2\0"+
                  "\1\12\4\0\1\12\4\0\10\12\1\203\14\12\7\0"+
                  "\3\12\2\0\1\12\4\0\1\12\4\0\2\12\1\204"+
                  "\22\12\7\0\3\12\2\0\1\12\4\0\1\12\4\0"+
                  "\4\12\1\156\20\12\7\0\3\12\2\0\1\12\4\0"+
                  "\1\12\4\0\11\12\1\205\13\12\7\0\3\12\2\0"+
                  "\1\12\4\0\1\12\4\0\12\12\1\206\12\12\7\0"+
                  "\3\12\2\0\1\12\4\0\1\12\4\0\21\12\1\207"+
                  "\3\12\7\0\3\12\2\0\1\12\4\0\1\12\4\0"+
                  "\11\12\1\210\13\12\7\0\3\12\2\0\1\12\4\0"+
                  "\1\12\4\0\17\12\1\211\5\12\7\0\3\12\2\0"+
                  "\1\12\7\110\1\153\1\152\42\110\4\0\1\12\4\0"+
                  "\6\12\1\207\16\12\7\0\3\12\2\0\1\12\4\0"+
                  "\1\12\4\0\16\12\1\212\6\12\7\0\3\12\2\0"+
                  "\1\12\4\0\1\12\4\0\22\12\1\213\2\12\7\0"+
                  "\3\12\2\0\1\12\4\0\1\12\4\0\2\12\1\214"+
                  "\22\12\7\0\3\12\2\0\1\12\4\0\1\12\4\0"+
                  "\7\12\1\215\15\12\7\0\3\12\2\0\1\12\4\0"+
                  "\1\12\4\0\4\12\1\216\20\12\7\0\3\12\2\0"+
                  "\1\12\4\0\1\12\4\0\12\12\1\217\12\12\7\0"+
                  "\3\12\2\0\1\12\4\0\1\12\4\0\25\12\7\0"+
                  "\2\12\1\220\2\0\1\12\4\0\1\12\4\0\11\12"+
                  "\1\221\13\12\7\0\3\12\2\0\1\12\4\0\1\12"+
                  "\4\0\15\12\1\222\7\12\7\0\3\12\2\0\1\12"+
                  "\4\0\1\12\4\0\16\12\1\223\6\12\7\0\3\12"+
                  "\2\0\1\12\4\0\1\12\4\0\2\12\1\224\22\12"+
                  "\7\0\3\12\2\0\1\12\4\0\1\12\4\0\25\12"+
                  "\7\0\3\12\2\0\1\225\4\0\1\12\4\0\3\12"+
                  "\1\226\21\12\7\0\3\12\2\0\1\12\4\0\1\12"+
                  "\4\0\20\12\1\156\4\12\7\0\3\12\2\0\1\12"+
                  "\4\0\1\12\4\0\10\12\1\227\14\12\7\0\3\12"+
                  "\2\0\1\12\4\0\1\12\4\0\7\12\1\230\15\12"+
                  "\7\0\3\12\2\0\1\12\4\0\1\12\4\0\21\12"+
                  "\1\231\3\12\7\0\3\12\2\0\1\12\4\0\1\12"+
                  "\4\0\4\12\1\232\4\12\1\233\13\12\7\0\3\12"+
                  "\2\0\1\12\4\0\1\12\4\0\3\12\1\234\21\12"+
                  "\7\0\3\12\2\0\1\12\4\0\1\12\4\0\4\12"+
                  "\1\235\20\12\7\0\3\12\2\0\1\12\4\0\1\12"+
                  "\4\0\5\12\1\236\17\12\7\0\3\12\2\0\1\12"+
                  "\4\0\1\12\4\0\5\12\1\237\17\12\7\0\3\12"+
                  "\2\0\1\12\4\0\1\12\4\0\4\12\1\240\20\12"+
                  "\7\0\3\12\2\0\1\12\4\0\1\12\4\0\14\12"+
                  "\1\241\10\12\7\0\3\12\2\0\1\12\4\0\1\12"+
                  "\4\0\5\12\1\242\17\12\7\0\3\12\2\0\1\12"+
                  "\4\0\1\12\4\0\3\12\1\243\21\12\7\0\3\12"+
                  "\2\0\1\12\4\0\1\12\4\0\14\12\1\244\10\12"+
                  "\7\0\3\12\2\0\1\12\4\0\1\12\4\0\10\12"+
                  "\1\234\14\12\7\0\3\12\2\0\1\12\4\0\1\12"+
                  "\4\0\15\12\1\245\7\12\7\0\3\12\2\0\1\12"+
                  "\4\0\1\12\4\0\15\12\1\246\7\12\7\0\3\12"+
                  "\2\0\1\12\4\0\1\12\4\0\3\12\1\247\21\12"+
                  "\7\0\3\12\2\0\1\12\4\0\1\12\4\0\25\12"+
                  "\7\0\2\12\1\250\2\0\1\12\4\0\1\12\4\0"+
                  "\25\12\7\0\1\12\1\251\1\12\2\0\1\12\4\0"+
                  "\1\12\4\0\14\12\1\252\10\12\7\0\3\12\2\0"+
                  "\1\12\4\0\1\12\4\0\11\12\1\253\13\12\7\0"+
                  "\3\12\2\0\1\12\4\0\1\12\4\0\3\12\1\254"+
                  "\21\12\7\0\3\12\2\0\1\12\4\0\1\12\4\0"+
                  "\2\12\1\255\22\12\7\0\3\12\2\0\1\12\4\0"+
                  "\1\12\4\0\6\12\1\156\16\12\7\0\3\12\2\0"+
                  "\1\12\4\0\1\12\4\0\10\12\1\256\14\12\7\0"+
                  "\3\12\2\0\1\12\4\0\1\12\4\0\7\12\1\156"+
                  "\15\12\7\0\3\12\2\0\1\12\4\0\1\12\4\0"+
                  "\10\12\1\257\14\12\7\0\3\12\2\0\1\12\4\0"+
                  "\1\12\4\0\2\12\1\260\22\12\7\0\3\12\2\0"+
                  "\1\12\4\0\1\12\4\0\5\12\1\261\17\12\7\0"+
                  "\3\12\2\0\1\12\4\0\1\12\4\0\6\12\1\262"+
                  "\16\12\7\0\3\12\2\0\1\12\4\0\1\12\4\0"+
                  "\2\12\1\263\22\12\7\0\3\12\2\0\1\12\4\0"+
                  "\1\12\4\0\23\12\1\264\1\12\7\0\3\12\2\0"+
                  "\1\12\4\0\1\12\4\0\20\12\1\265\4\12\7\0"+
                  "\3\12\2\0\1\12\4\0\1\12\4\0\17\12\1\266"+
                  "\5\12\7\0\3\12\2\0\1\12\4\0\1\12\4\0"+
                  "\5\12\1\267\17\12\7\0\3\12\2\0\1\12\4\0"+
                  "\1\12\4\0\12\12\1\270\12\12\7\0\3\12\2\0"+
                  "\1\12\4\0\1\12\4\0\12\12\1\271\12\12\7\0"+
                  "\3\12\2\0\1\12\4\0\1\12\4\0\12\12\1\272"+
                  "\12\12\7\0\3\12\2\0\1\12\4\0\1\12\4\0"+
                  "\15\12\1\257\7\12\7\0\3\12\2\0\1\12\4\0"+
                  "\1\12\4\0\3\12\1\273\21\12\7\0\3\12\2\0"+
                  "\1\12\4\0\1\12\4\0\3\12\1\156\21\12\7\0"+
                  "\3\12\2\0\1\12\4\0\1\12\4\0\15\12\1\274"+
                  "\7\12\7\0\3\12\2\0\1\12\4\0\1\12\4\0"+
                  "\10\12\1\275\14\12\7\0\3\12\2\0\1\12\4\0"+
                  "\1\12\4\0\10\12\1\276\14\12\7\0\3\12\2\0"+
                  "\1\12\4\0\1\12\4\0\4\12\1\277\20\12\7\0"+
                  "\3\12\2\0\1\12\4\0\1\12\4\0\3\12\1\300"+
                  "\21\12\7\0\3\12\2\0\1\12\4\0\1\12\4\0"+
                  "\4\12\1\301\20\12\7\0\3\12\2\0\1\12\4\0"+
                  "\1\12\4\0\3\12\1\302\21\12\7\0\3\12\2\0"+
                  "\1\12\4\0\1\12\4\0\11\12\1\303\13\12\7\0"+
                  "\3\12\2\0\1\12\4\0\1\12\4\0\11\12\1\304"+
                  "\13\12\7\0\3\12\2\0\1\12\4\0\1\12\4\0"+
                  "\2\12\1\305\22\12\7\0\3\12\2\0\1\12\4\0"+
                  "\1\12\4\0\15\12\1\234\7\12\7\0\3\12\2\0"+
                  "\1\12\4\0\1\12\4\0\12\12\1\306\12\12\7\0"+
                  "\3\12\2\0\1\12\4\0\1\12\4\0\15\12\1\307"+
                  "\7\12\7\0\3\12\2\0\1\12\4\0\1\12\4\0"+
                  "\3\12\1\310\21\12\7\0\3\12\2\0\1\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6923];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\1\0\1\1\1\11\3\1\1\11\1\1\1\11\17\1"+
                  "\6\11\4\1\1\11\3\1\1\0\34\1\1\11\1\1"+
                  "\2\11\2\0\40\1\1\0\1\11\135\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public JassLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JassLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
          { return STRING_LITERAL;
          }
          // fall through
          case 53: break;
          case 2:
          { return BAD_CHARACTER;
          }
          // fall through
          case 54: break;
          case 3:
          { return WHITE_SPACE;
          }
          // fall through
          case 55: break;
          case 4:
          { return INTEGER_LITERAL;
          }
          // fall through
          case 56: break;
          case 5:
          { yybegin(WAITING_STRING); return DOUBLE_QUOTE;
          }
          // fall through
          case 57: break;
          case 6:
          { return DIV;
          }
          // fall through
          case 58: break;
          case 7:
          { return MUL;
          }
          // fall through
          case 59: break;
          case 8:
          { return ID;
          }
          // fall through
          case 60: break;
          case 9:
          { return EQ;
          }
          // fall through
          case 61: break;
          case 10:
          { return PLUS;
          }
          // fall through
          case 62: break;
          case 11:
          { return MINUS;
          }
          // fall through
          case 63: break;
          case 12:
          { return LPAREN;
          }
          // fall through
          case 64: break;
          case 13:
          { return RPAREN;
          }
          // fall through
          case 65: break;
          case 14:
          { return COLON;
          }
          // fall through
          case 66: break;
          case 15:
          { return NUMBER_SIGN;
          }
          // fall through
          case 67: break;
          case 16:
          { return GT;
          }
          // fall through
          case 68: break;
          case 17:
          { return LT;
          }
          // fall through
          case 69: break;
          case 18:
          { yybegin(YYINITIAL); return DOUBLE_QUOTE;
          }
          // fall through
          case 70: break;
          case 19:
          { return REAL_LITERAL;
          }
          // fall through
          case 71: break;
          case 20:
          { return EOL_COMMENT;
          }
          // fall through
          case 72: break;
          case 21:
          { return IF;
          }
          // fall through
          case 73: break;
          case 22:
          { return DOUBLE_EQ;
          }
          // fall through
          case 74: break;
          case 23:
          { return GE;
          }
          // fall through
          case 75: break;
          case 24:
          { return LE;
          }
          // fall through
          case 76: break;
          case 25:
          { return NOT;
          }
          // fall through
          case 77: break;
          case 26:
          { return SET;
          }
          // fall through
          case 78: break;
          case 27:
          { return MUL_COMMENT;
          }
          // fall through
          case 79: break;
          case 28:
          { return TYPE_ID;
          }
          // fall through
          case 80: break;
          case 29:
          { return NULL;
          }
          // fall through
          case 81: break;
          case 30:
          { return TYPE;
          }
          // fall through
          case 82: break;
          case 31:
          { return THEN;
          }
          // fall through
          case 83: break;
          case 32:
          { return ELSE;
          }
          // fall through
          case 84: break;
          case 33:
          { return LOOP;
          }
          // fall through
          case 85: break;
          case 34:
          { return CALL;
          }
          // fall through
          case 86: break;
          case 35:
          { return TAKES;
          }
          // fall through
          case 87: break;
          case 36:
          { return ENDIF;
          }
          // fall through
          case 88: break;
          case 37:
          { return ARRAY;
          }
          // fall through
          case 89: break;
          case 38:
          { return LOCAL;
          }
          // fall through
          case 90: break;
          case 39:
          { return NATIVE;
          }
          // fall through
          case 91: break;
          case 40:
          { return ELSEIF;
          }
          // fall through
          case 92: break;
          case 41:
          { return RETURN;
          }
          // fall through
          case 93: break;
          case 42:
          { return INCLUDE;
          }
          // fall through
          case 94: break;
          case 43:
          { return NOTHING;
          }
          // fall through
          case 95: break;
          case 44:
          { return ENDLOOP;
          }
          // fall through
          case 96: break;
          case 45:
          { return EXTENDS;
          }
          // fall through
          case 97: break;
          case 46:
          { return GLOBALS;
          }
          // fall through
          case 98: break;
          case 47:
          { return RETURNS;
          }
          // fall through
          case 99: break;
          case 48:
          { return EXITWHEN;
          }
          // fall through
          case 100: break;
          case 49:
          { return CONSTANT;
          }
          // fall through
          case 101: break;
          case 50:
          { return FUNCTION;
          }
          // fall through
          case 102: break;
          case 51:
          { return ENDGLOBALS;
          }
          // fall through
          case 103: break;
          case 52:
          { return ENDFUNCTION;
          }
          // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
