{
    parserClass="cn.gsein.zjass.parser.JassParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Jass"
    psiImplClassSuffix="Impl"
    psiPackage="cn.gsein.zjass.psi"
    psiImplPackage="cn.gsein.zjass.psi.impl"

    elementTypeHolderClass="cn.gsein.zjass.psi.JassTypes"
    elementTypeClass="cn.gsein.zjass.psi.JassElementType"
    tokenTypeClass="cn.gsein.zjass.psi.JassTokenType"

    psiImplUtilClass = "cn.gsein.zjass.psi.impl.JassPsiImplUtil"
}

jassFile ::= item_*

//
private item_ ::=  (global_block|type_def|native_def|func|comment)
global_block ::= (GLOBALS global_decl* ENDGLOBALS)
global_decl ::= (CONSTANT? var_type var_name (ARRAY | (EQ var_value)?))
var_type ::= TYPE_ID
var_name ::= ID
var_value ::= (string_expr (PLUS string_expr)*|number_expr|NULL)
string_expr ::= DOUBLE_QUOTE STRING_CONST DOUBLE_QUOTE | func_call
number_expr ::= term (MINUS|PLUS term)*
term ::= factor (MUL|DIV factor) *
factor ::= func_call|MINUS factor| PLUS factor|LPAREN expr RPAREN|var_name|INTEGER_CONST|REAL_CONST
func_call ::= func_name LPAREN (var_name (COLON var_name)*|empty) RPAREN
empty ::=
func_name ::= ID
type_def ::= TYPE var_type EXTENDS var_type
native_def ::= CONSTANT? NATIVE func_name TAKES (NOTHING | var_type var_name (COLON var_type var_name)*) RETURNS (NOTHING | var_type)
func ::= func_def local_def? compound_statment ENDFUNCTION
func_def ::= FUNCTION func_name TAKES (NOTHING | var_type var_name (COLON var_type var_name)*)
    RETURNS (NOTHING | var_type) {mixin="cn.gsein.zjass.psi.impl.JassNamedElementImpl"
    implements="cn.gsein.zjass.psi.JassNamedElement" methods=[getName setName getNameIdentifier]}
local_def ::= LOCAL var_type var_name (ARRAY | (EQ var_value)?)
compound_statment ::= (call_statement|assign_statement|condition_statement|loop_statement)* return_statement?
call_statement ::= CALL func_call
assign_statement ::= SET var_name EQ var_value
condition_statement ::= IF bool_expr THEN compound_statment ((ELSEIF compound_statment)* ELSE compound_statment)? ENDIF
bool_expr ::= number_expr (GT | DOUBLE_EQ | LT | LE | GE) number_expr | string_expr DOUBLE_QUOTE string_expr | var_name | func_call
loop_statement ::= LOOP ( EXITWHEN bool_expr|compound_statment)* ENDLOOP
return_statement ::= RETURN var_value
comment ::= EOL_COMMENT | MUL_COMMENT
